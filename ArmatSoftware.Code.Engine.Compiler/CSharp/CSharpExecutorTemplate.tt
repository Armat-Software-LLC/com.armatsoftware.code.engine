<#@ template language="C#" debug="true" hostspecific="false" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>

<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

<# foreach (var import in Configuration.GetImports()) { #>
using <#=import#>;
<# } #>

namespace <#=Configuration.GetNamespace()#>
{
	public class <#=Configuration.GetClassName()#> : IExecutor<<#=Configuration.GetSubjectType()#>>
	{
		private Dictionary<string, dynamic> runtimeValues = new Dictionary<string, dynamic>();

		public <#=Configuration.GetSubjectType()#> Subject { get; set; }

		public dynamic Read(string key)
		{
			return this.runtimeValues[key];
		}

		public void Save(string key, dynamic value)
		{
			this.runtimeValues.Add(key, value);
		}

        public IExecutor<<#=Configuration.GetSubjectType()#>> Clone()
        {
            return (IExecutor<<#=Configuration.GetSubjectType()#>>) MemberwiseClone();
        }

		public void Execute()
		{
<# foreach (var action in Configuration.GetActions()) { #>
			<#=action.Key#>();
<# } #>
		}

        public <#=Configuration.GetSubjectType()#> Execute(<#=Configuration.GetSubjectType()#> subject)
        {
            Subject = subject;
            Execute();
            return Subject;
        }

		public ICodeEngineLogger Log { get; set; }
		
<# foreach (var action in Configuration.GetActions()) { #>
		private void <#=action.Key#>()
		{
			<#=action.Value#>
		}
<# } #>
	}
}