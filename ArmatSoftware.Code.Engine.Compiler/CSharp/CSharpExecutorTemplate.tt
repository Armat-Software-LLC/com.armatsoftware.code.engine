<#@ template language="C#" debug="true" hostspecific="false" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>

<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

<# foreach (var import in Configuration.GetImports()) { #>
using <#=import#>;
<# } #>

namespace <#=Configuration.GetNamespace()#>
{
	public class <#=Configuration.GetClassName()#> : IFactoryExecutor<<#=Configuration.GetSubjectType()#>>
	{
		private Dictionary<string, dynamic> _runtimeValues = new Dictionary<string, dynamic>();

		private <#=Configuration.GetSubjectType()#> _subject;

		private ICodeEngineLogger _logger;


		public <#=Configuration.GetSubjectType()#> Subject => _subject;

		public ICodeEngineLogger Log => _logger;

		public dynamic Read(string key)
		{
			return this._runtimeValues[key];
		}

		public void Save(string key, dynamic value)
		{
			this._runtimeValues.Add(key, value);
		}

        public IExecutor<<#=Configuration.GetSubjectType()#>> Clone()
        {
            return (IExecutor<<#=Configuration.GetSubjectType()#>>) MemberwiseClone();
        }

        public <#=Configuration.GetSubjectType()#> Execute(<#=Configuration.GetSubjectType()#> subject)
        {
            _subject = subject;
            
<# foreach (var action in Configuration.GetActions()) { #>
			<#=action.Key#>();
<# } #>
			
<#
   if (Configuration.EnableModelValidation())
   {
#>
			ObjectValidator.Validate(_subject);			
<#
   }
#>
            return _subject;
        }

	    public void SetLogger(ICodeEngineLogger logger)
	    {
	        _logger = logger;
	    }
		
<# foreach (var action in Configuration.GetActions()) { #>
		private void <#=action.Key#>()
		{
			<#=action.Value#>
		}
<# } #>
	}
}